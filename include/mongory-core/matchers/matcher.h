#ifndef MONGORY_MATCHER_H
#define MONGORY_MATCHER_H

/**
 * @file matcher.h
 * @brief Defines the core mongory_matcher structure and related types.
 *
 * This file provides the basic structure for all matchers in the Mongory
 * library. A matcher is responsible for determining if a given `mongory_value`
 * meets certain criteria defined by a `condition`.
 */

#include "mongory-core/foundations/array.h" // For mongory_array (used in context)
#include "mongory-core/foundations/memory_pool.h"
#include "mongory-core/foundations/value.h"

// Forward declaration for the main matcher structure.
typedef struct mongory_matcher mongory_matcher;
/**
 * @brief Creates a new matcher instance based on a query condition.
 *
 * This function parses the `condition` value and constructs a tree of matcher
 * objects capable of evaluating it. It is the main entry point for turning a
 * user-defined query into an executable matcher.
 *
 * The function automatically detects the type of condition (e.g., a table with
 * operators like `$eq`, `$gt`, a literal value for an equality check) and
 * builds the appropriate matcher chain.
 *
 * @param pool The memory pool to use for the matcher's allocations.
 * @param condition A `mongory_value` representing the query condition. This is
 *        typically a `mongory_table` that looks like a MongoDB query document.
 * @param extern_ctx A generic pointer to an external context. This is passed down
 *        to any custom "external matchers" that are created, allowing them to
 *        access host-language state. Can be `NULL` if not needed.
 * @return mongory_matcher* A pointer to the newly created matcher, or `NULL`
 *         on failure (e.g., if the condition is malformed).
 */
mongory_matcher *mongory_matcher_new(mongory_memory_pool *pool, mongory_value *condition, void *extern_ctx);

/**
 * @brief Evaluates whether a given value matches the criteria of the matcher.
 *
 * @param matcher The matcher to use for the evaluation.
 * @param value The `mongory_value` to test against the matcher's condition.
 * @return `true` if the value satisfies the matcher's condition, `false`
 *         otherwise.
 */
bool mongory_matcher_match(mongory_matcher *matcher, mongory_value *value);

/**
 * @brief Generates a human-readable explanation of the matcher's logic.
 *
 * This function is useful for debugging. It traverses the matcher tree and
 * prints a representation of the logic it will apply, which can help verify
 * that a complex query was parsed correctly. The explanation is printed to
 * `stdout`.
 *
 * @param matcher The matcher to explain.
 * @param temp_pool A temporary memory pool to use for allocating the strings
 *        needed for the explanation. This pool can be reset or freed after
 *        the explanation is generated.
 */
void mongory_matcher_explain(mongory_matcher *matcher, mongory_memory_pool *temp_pool);

/**
 * @brief Performs a match and records the evaluation path for debugging.
 *
 * This function behaves like `mongory_matcher_match` but also stores detailed
 * information about which parts of the matcher succeeded or failed, and why.
 * This is invaluable for debugging why a specific document did or did not match
 * a complex query.
 *
 * To use tracing, you must first call `mongory_matcher_enable_trace`. After
 * calling `trace`, you can inspect the results with
 * `mongory_matcher_print_trace`.
 *
 * @param matcher The matcher to trace.
 * @param value The value to match against.
 * @return `true` if the value matches, `false` otherwise.
 * @see mongory_matcher_enable_trace
 * @see mongory_matcher_print_trace
 */
bool mongory_matcher_trace(mongory_matcher *matcher, mongory_value *value);

/**
 * @brief Prints the trace generated by the last call to `mongory_matcher_trace`.
 *
 * The output is a tree-like structure sent to `stdout` that shows the step-by-step
 * evaluation of the matcher against the value.
 *
 * @param matcher The matcher whose trace should be printed.
 */
void mongory_matcher_print_trace(mongory_matcher *matcher);

/**
 * @brief Enables the tracing functionality for a matcher.
 *
 * This allocates the necessary internal structures for storing the trace data.
 * It must be called before using `mongory_matcher_trace`.
 *
 * @param matcher The matcher to enable tracing on.
 * @param temp_pool A memory pool to use for allocating the trace context and
 *        log entries. This pool should persist until tracing is disabled.
 */
void mongory_matcher_enable_trace(mongory_matcher *matcher, mongory_memory_pool *temp_pool);

/**
 * @brief Disables tracing and frees associated resources.
 *
 * After calling this, the internal trace context is destroyed. The pool
 * passed to `mongory_matcher_enable_trace` can now be safely freed.
 *
 * @param matcher The matcher to disable tracing on.
 */
void mongory_matcher_disable_trace(mongory_matcher *matcher);

#endif /* MONGORY_MATCHER_H */
